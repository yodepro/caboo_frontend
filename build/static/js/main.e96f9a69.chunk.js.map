{"version":3,"sources":["redux/temp/temp.constants.js","constants/api.js","redux/temp/temp.reducer.js","redux/rootReducer.js","redux/store.js","helpers/history.js","components/Header/Header.jsx","redux/temp/temp.actions.js","layouts/Inner/InnerLayout.jsx","App.jsx","serviceWorker.js","index.js"],"names":["tempConstants","API","axios","create","baseURL","timeout","headers","Accept","interceptors","response","use","data","error","Promise","reject","Endpoints","initialState","undefined","loading","temp","createReducer","state","action","info","rootReducer","combineReducers","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","history","createBrowserHistory","b","withNaming","n","e","m","v","cn","Header","getInfo","this","props","className","icon","faMapMarkerAlt","size","UserOutlined","type","faSignOutAlt","React","Component","connectedComponent","connect","dispatch","GET_INFO_REQUEST","GET_INFO_SUCCESS","GET_INFO_FAILURE","success","a","get","console","log","InnerLayout","children","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e96f9a69.chunk.js","sourcesContent":["export const tempConstants = {\n  GET_INFO_REQUEST: \"GET_INFO_REQUEST\",\n  GET_INFO_SUCCESS: \"GET_INFO_SUCCESS\",\n  GET_INFO_FAILURE: \"GET_INFO_FAILURE\",\n};\n","import axios from \"axios\";\n\nconst baseURL = \"https://bartokyo.yode.pro\";\n\nconst API = axios.create({\n  baseURL,\n  timeout: 20000,\n  // withCredentials: true,\n  headers: {\n    Accept: \"application/json\",\n    \"Content-type\": \"application/json\",\n  },\n});\n\nAPI.interceptors.response.use(\n  function (response) {\n    return response.data;\n  },\n  function (error) {\n    return Promise.reject(error?.response?.data);\n  }\n);\n\nexport { API };\n\nexport const Endpoints = {\n  TEMP: \"/api_front\",\n};\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { tempConstants } from \"./temp.constants\";\n\nexport const getInfoRequest = (state, action) => {\n  return {\n    ...state,\n    loading: true,\n  };\n};\n\nexport const getInfoSuccess = (state, action) => {\n  return {\n    ...state,\n    loading: false,\n    info: action.data,\n  };\n};\n\nexport const getInfoFailure = (state, action) => {\n  return {\n    ...state,\n    loading: false,\n  };\n};\n\nconst initialState = { data: undefined, loading: false };\n\nexport const temp = createReducer(initialState, {\n  [tempConstants.GET_INFO_REQUEST]: getInfoRequest,\n  [tempConstants.GET_INFO_SUCCESS]: getInfoSuccess,\n  [tempConstants.GET_INFO_FAILURE]: getInfoFailure,\n});\n","import { combineReducers } from \"redux\";\nimport { temp } from \"./temp\";\n\nconst rootReducer = combineReducers({ temp });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport rootReducer from \"./rootReducer\";\n\nconst loggerMiddleware = createLogger();\n\nexport const store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, loggerMiddleware)\n);\n","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { withNaming } from \"@bem-react/classname\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMapMarkerAlt,\n  faSignOutAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Avatar, Button } from \"antd\";\nimport { UserOutlined, LogoutOutlined } from \"@ant-design/icons\";\nimport { getInfo } from \"../../redux/temp\";\nimport \"./Header.less\";\n\nconst cn = withNaming({ n: \"\", e: \"__\", m: \"_\", v: \"_\" });\nconst b = cn(\"site-header\");\n\nclass Header extends React.Component {\n  componentDidMount() {\n    const { getInfo } = this.props;\n\n    getInfo();\n  }\n\n  render() {\n    return (\n      <header className={b()}>\n        <div className={b(\"place-wrapper\")}>\n          <FontAwesomeIcon\n            icon={faMapMarkerAlt}\n            size=\"lg\"\n            className={b(\"map-icon\")}\n          />\n          <span className={b(\"city-name\")}>Йошкар-Ола</span>\n        </div>\n        <div className={b(\"user-wrapper\")}>\n          <Avatar icon={<UserOutlined />} className={b(\"avatar\")} />\n          <div className={b(\"user-name\")}>Роман</div>\n        </div>\n        <Button\n          type=\"link\"\n          // icon={<FontAwesomeIcon icon={faMapMarkerAlt} size=\"lg\" />}\n          icon={<FontAwesomeIcon icon={faSignOutAlt} size=\"lg\" />}\n          className={b(\"logout-button\")}\n        >\n          <span className=\"visually-hidden\">Выйти</span>\n        </Button>\n      </header>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {};\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getInfo: () => dispatch(getInfo()),\n  };\n}\n\nconst connectedComponent = connect(mapStateToProps, mapDispatchToProps)(Header);\n\nexport { connectedComponent as Header };\n","import { API, Endpoints } from \"../../constants\";\nimport { tempConstants } from \"./temp.constants\";\n\nexport const getInfo = () => {\n  const {\n    GET_INFO_REQUEST,\n    GET_INFO_SUCCESS,\n    GET_INFO_FAILURE,\n  } = tempConstants;\n  const request = () => ({ type: GET_INFO_REQUEST });\n  const success = (data) => ({ type: GET_INFO_SUCCESS, data });\n  const failure = () => ({ type: GET_INFO_FAILURE });\n\n  return async function (dispatch) {\n    dispatch(request());\n    try {\n      const data = await API.get(`${Endpoints.TEMP}`);\n      console.log(\"data =\", data);\n      dispatch(success(\"\"));\n    } catch (err) {\n      dispatch(failure());\n    }\n  };\n};\n","import React from \"react\";\nimport { withNaming } from \"@bem-react/classname\";\nimport { Header } from \"../../components\";\nimport \"./InnerLayout.less\";\n\nconst cn = withNaming({ n: \"\", e: \"__\", m: \"_\", v: \"_\" });\nconst b = cn(\"inner-layout\");\n\nexport const InnerLayout = (props) => {\n  const { children } = props;\n  return (\n    <div className={b()}>\n      <Header />\n      <main className={b(\"main-container\")}>{children}</main>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Router, Route, Switch, withRouter } from \"react-router-dom\";\nimport { history } from \"./helpers\";\nimport { withNaming } from \"@bem-react/classname\";\nimport { InnerLayout } from \"./layouts/Inner/InnerLayout\";\nimport \"./App.less\";\n\nconst cn = withNaming({ n: \"\", e: \"__\", m: \"_\", v: \"_\" });\nconst b = cn(\"app\");\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router history={history}>\n        <div className={b()}>\n          <Switch>\n            <InnerLayout>\n              <Route\n                exact\n                path={\"/\"}\n                render={(props) => <div>hello world</div>}\n              />\n            </InnerLayout>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"antd/dist/antd.css\";\nimport { store } from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}